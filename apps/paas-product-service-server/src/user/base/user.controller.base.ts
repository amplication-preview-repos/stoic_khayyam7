/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { BusinessIncomeTaxFindManyArgs } from "../../businessIncomeTax/base/BusinessIncomeTaxFindManyArgs";
import { BusinessIncomeTax } from "../../businessIncomeTax/base/BusinessIncomeTax";
import { BusinessIncomeTaxWhereUniqueInput } from "../../businessIncomeTax/base/BusinessIncomeTaxWhereUniqueInput";
import { GstFindManyArgs } from "../../gst/base/GstFindManyArgs";
import { Gst } from "../../gst/base/Gst";
import { GstWhereUniqueInput } from "../../gst/base/GstWhereUniqueInput";
import { IndividualIncomeTaxFindManyArgs } from "../../individualIncomeTax/base/IndividualIncomeTaxFindManyArgs";
import { IndividualIncomeTax } from "../../individualIncomeTax/base/IndividualIncomeTax";
import { IndividualIncomeTaxWhereUniqueInput } from "../../individualIncomeTax/base/IndividualIncomeTaxWhereUniqueInput";
import { LegalComplianceFindManyArgs } from "../../legalCompliance/base/LegalComplianceFindManyArgs";
import { LegalCompliance } from "../../legalCompliance/base/LegalCompliance";
import { LegalComplianceWhereUniqueInput } from "../../legalCompliance/base/LegalComplianceWhereUniqueInput";
import { TdsFindManyArgs } from "../../tds/base/TdsFindManyArgs";
import { Tds } from "../../tds/base/Tds";
import { TdsWhereUniqueInput } from "../../tds/base/TdsWhereUniqueInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/businessIncomeTaxes")
  @ApiNestedQuery(BusinessIncomeTaxFindManyArgs)
  async findBusinessIncomeTaxes(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<BusinessIncomeTax[]> {
    const query = plainToClass(BusinessIncomeTaxFindManyArgs, request.query);
    const results = await this.service.findBusinessIncomeTaxes(params.id, {
      ...query,
      select: {
        annualIncome: true,
        businessName: true,
        businessType: true,
        createdAt: true,
        financialYear: true,
        id: true,
        taxPaid: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/businessIncomeTaxes")
  async connectBusinessIncomeTaxes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BusinessIncomeTaxWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      businessIncomeTaxes: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/businessIncomeTaxes")
  async updateBusinessIncomeTaxes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BusinessIncomeTaxWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      businessIncomeTaxes: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/businessIncomeTaxes")
  async disconnectBusinessIncomeTaxes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BusinessIncomeTaxWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      businessIncomeTaxes: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/gsts")
  @ApiNestedQuery(GstFindManyArgs)
  async findGsts(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Gst[]> {
    const query = plainToClass(GstFindManyArgs, request.query);
    const results = await this.service.findGsts(params.id, {
      ...query,
      select: {
        annualTurnover: true,
        createdAt: true,
        financialYear: true,
        gstNumber: true,
        id: true,
        taxPaid: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/gsts")
  async connectGsts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GstWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gsts: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/gsts")
  async updateGsts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GstWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gsts: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/gsts")
  async disconnectGsts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GstWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gsts: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/individualIncomeTaxes")
  @ApiNestedQuery(IndividualIncomeTaxFindManyArgs)
  async findIndividualIncomeTaxes(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<IndividualIncomeTax[]> {
    const query = plainToClass(IndividualIncomeTaxFindManyArgs, request.query);
    const results = await this.service.findIndividualIncomeTaxes(params.id, {
      ...query,
      select: {
        annualIncome: true,
        createdAt: true,
        financialYear: true,
        id: true,
        incomeType: true,
        taxPaid: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/individualIncomeTaxes")
  async connectIndividualIncomeTaxes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: IndividualIncomeTaxWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      individualIncomeTaxes: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/individualIncomeTaxes")
  async updateIndividualIncomeTaxes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: IndividualIncomeTaxWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      individualIncomeTaxes: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/individualIncomeTaxes")
  async disconnectIndividualIncomeTaxes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: IndividualIncomeTaxWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      individualIncomeTaxes: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/legalCompliances")
  @ApiNestedQuery(LegalComplianceFindManyArgs)
  async findLegalCompliances(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<LegalCompliance[]> {
    const query = plainToClass(LegalComplianceFindManyArgs, request.query);
    const results = await this.service.findLegalCompliances(params.id, {
      ...query,
      select: {
        businessName: true,
        complianceDate: true,
        complianceType: true,
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/legalCompliances")
  async connectLegalCompliances(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LegalComplianceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      legalCompliances: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/legalCompliances")
  async updateLegalCompliances(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LegalComplianceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      legalCompliances: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/legalCompliances")
  async disconnectLegalCompliances(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LegalComplianceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      legalCompliances: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tdsItems")
  @ApiNestedQuery(TdsFindManyArgs)
  async findTdsItems(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Tds[]> {
    const query = plainToClass(TdsFindManyArgs, request.query);
    const results = await this.service.findTdsItems(params.id, {
      ...query,
      select: {
        annualTurnover: true,
        createdAt: true,
        financialYear: true,
        id: true,
        taxDeducted: true,
        tdsCertificateNumber: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tdsItems")
  async connectTdsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TdsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tdsItems: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tdsItems")
  async updateTdsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TdsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tdsItems: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tdsItems")
  async disconnectTdsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TdsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tdsItems: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
