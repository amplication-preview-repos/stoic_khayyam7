/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LegalCompliance } from "./LegalCompliance";
import { LegalComplianceCountArgs } from "./LegalComplianceCountArgs";
import { LegalComplianceFindManyArgs } from "./LegalComplianceFindManyArgs";
import { LegalComplianceFindUniqueArgs } from "./LegalComplianceFindUniqueArgs";
import { CreateLegalComplianceArgs } from "./CreateLegalComplianceArgs";
import { UpdateLegalComplianceArgs } from "./UpdateLegalComplianceArgs";
import { DeleteLegalComplianceArgs } from "./DeleteLegalComplianceArgs";
import { User } from "../../user/base/User";
import { LegalComplianceService } from "../legalCompliance.service";
@graphql.Resolver(() => LegalCompliance)
export class LegalComplianceResolverBase {
  constructor(protected readonly service: LegalComplianceService) {}

  async _legalCompliancesMeta(
    @graphql.Args() args: LegalComplianceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LegalCompliance])
  async legalCompliances(
    @graphql.Args() args: LegalComplianceFindManyArgs
  ): Promise<LegalCompliance[]> {
    return this.service.legalCompliances(args);
  }

  @graphql.Query(() => LegalCompliance, { nullable: true })
  async legalCompliance(
    @graphql.Args() args: LegalComplianceFindUniqueArgs
  ): Promise<LegalCompliance | null> {
    const result = await this.service.legalCompliance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LegalCompliance)
  async createLegalCompliance(
    @graphql.Args() args: CreateLegalComplianceArgs
  ): Promise<LegalCompliance> {
    return await this.service.createLegalCompliance({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => LegalCompliance)
  async updateLegalCompliance(
    @graphql.Args() args: UpdateLegalComplianceArgs
  ): Promise<LegalCompliance | null> {
    try {
      return await this.service.updateLegalCompliance({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LegalCompliance)
  async deleteLegalCompliance(
    @graphql.Args() args: DeleteLegalComplianceArgs
  ): Promise<LegalCompliance | null> {
    try {
      return await this.service.deleteLegalCompliance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: LegalCompliance
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
