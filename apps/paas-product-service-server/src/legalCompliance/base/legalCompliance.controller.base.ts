/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LegalComplianceService } from "../legalCompliance.service";
import { LegalComplianceCreateInput } from "./LegalComplianceCreateInput";
import { LegalCompliance } from "./LegalCompliance";
import { LegalComplianceFindManyArgs } from "./LegalComplianceFindManyArgs";
import { LegalComplianceWhereUniqueInput } from "./LegalComplianceWhereUniqueInput";
import { LegalComplianceUpdateInput } from "./LegalComplianceUpdateInput";

export class LegalComplianceControllerBase {
  constructor(protected readonly service: LegalComplianceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LegalCompliance })
  async createLegalCompliance(
    @common.Body() data: LegalComplianceCreateInput
  ): Promise<LegalCompliance> {
    return await this.service.createLegalCompliance({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        businessName: true,
        complianceDate: true,
        complianceType: true,
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LegalCompliance] })
  @ApiNestedQuery(LegalComplianceFindManyArgs)
  async legalCompliances(
    @common.Req() request: Request
  ): Promise<LegalCompliance[]> {
    const args = plainToClass(LegalComplianceFindManyArgs, request.query);
    return this.service.legalCompliances({
      ...args,
      select: {
        businessName: true,
        complianceDate: true,
        complianceType: true,
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LegalCompliance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async legalCompliance(
    @common.Param() params: LegalComplianceWhereUniqueInput
  ): Promise<LegalCompliance | null> {
    const result = await this.service.legalCompliance({
      where: params,
      select: {
        businessName: true,
        complianceDate: true,
        complianceType: true,
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LegalCompliance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLegalCompliance(
    @common.Param() params: LegalComplianceWhereUniqueInput,
    @common.Body() data: LegalComplianceUpdateInput
  ): Promise<LegalCompliance | null> {
    try {
      return await this.service.updateLegalCompliance({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          businessName: true,
          complianceDate: true,
          complianceType: true,
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LegalCompliance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLegalCompliance(
    @common.Param() params: LegalComplianceWhereUniqueInput
  ): Promise<LegalCompliance | null> {
    try {
      return await this.service.deleteLegalCompliance({
        where: params,
        select: {
          businessName: true,
          complianceDate: true,
          complianceType: true,
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
