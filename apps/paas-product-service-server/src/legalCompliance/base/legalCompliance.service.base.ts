/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LegalCompliance as PrismaLegalCompliance,
  User as PrismaUser,
} from "@prisma/client";

export class LegalComplianceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LegalComplianceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.legalCompliance.count(args);
  }

  async legalCompliances(
    args: Prisma.LegalComplianceFindManyArgs
  ): Promise<PrismaLegalCompliance[]> {
    return this.prisma.legalCompliance.findMany(args);
  }
  async legalCompliance(
    args: Prisma.LegalComplianceFindUniqueArgs
  ): Promise<PrismaLegalCompliance | null> {
    return this.prisma.legalCompliance.findUnique(args);
  }
  async createLegalCompliance(
    args: Prisma.LegalComplianceCreateArgs
  ): Promise<PrismaLegalCompliance> {
    return this.prisma.legalCompliance.create(args);
  }
  async updateLegalCompliance(
    args: Prisma.LegalComplianceUpdateArgs
  ): Promise<PrismaLegalCompliance> {
    return this.prisma.legalCompliance.update(args);
  }
  async deleteLegalCompliance(
    args: Prisma.LegalComplianceDeleteArgs
  ): Promise<PrismaLegalCompliance> {
    return this.prisma.legalCompliance.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.legalCompliance
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
