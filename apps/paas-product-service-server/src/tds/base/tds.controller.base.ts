/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TdsService } from "../tds.service";
import { TdsCreateInput } from "./TdsCreateInput";
import { Tds } from "./Tds";
import { TdsFindManyArgs } from "./TdsFindManyArgs";
import { TdsWhereUniqueInput } from "./TdsWhereUniqueInput";
import { TdsUpdateInput } from "./TdsUpdateInput";

export class TdsControllerBase {
  constructor(protected readonly service: TdsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tds })
  async createTds(@common.Body() data: TdsCreateInput): Promise<Tds> {
    return await this.service.createTds({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        annualTurnover: true,
        createdAt: true,
        financialYear: true,
        id: true,
        taxDeducted: true,
        tdsCertificateNumber: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Tds] })
  @ApiNestedQuery(TdsFindManyArgs)
  async tdsItems(@common.Req() request: Request): Promise<Tds[]> {
    const args = plainToClass(TdsFindManyArgs, request.query);
    return this.service.tdsItems({
      ...args,
      select: {
        annualTurnover: true,
        createdAt: true,
        financialYear: true,
        id: true,
        taxDeducted: true,
        tdsCertificateNumber: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tds })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tds(@common.Param() params: TdsWhereUniqueInput): Promise<Tds | null> {
    const result = await this.service.tds({
      where: params,
      select: {
        annualTurnover: true,
        createdAt: true,
        financialYear: true,
        id: true,
        taxDeducted: true,
        tdsCertificateNumber: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tds })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTds(
    @common.Param() params: TdsWhereUniqueInput,
    @common.Body() data: TdsUpdateInput
  ): Promise<Tds | null> {
    try {
      return await this.service.updateTds({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          annualTurnover: true,
          createdAt: true,
          financialYear: true,
          id: true,
          taxDeducted: true,
          tdsCertificateNumber: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tds })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTds(
    @common.Param() params: TdsWhereUniqueInput
  ): Promise<Tds | null> {
    try {
      return await this.service.deleteTds({
        where: params,
        select: {
          annualTurnover: true,
          createdAt: true,
          financialYear: true,
          id: true,
          taxDeducted: true,
          tdsCertificateNumber: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
