/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Tds } from "./Tds";
import { TdsCountArgs } from "./TdsCountArgs";
import { TdsFindManyArgs } from "./TdsFindManyArgs";
import { TdsFindUniqueArgs } from "./TdsFindUniqueArgs";
import { CreateTdsArgs } from "./CreateTdsArgs";
import { UpdateTdsArgs } from "./UpdateTdsArgs";
import { DeleteTdsArgs } from "./DeleteTdsArgs";
import { User } from "../../user/base/User";
import { TdsService } from "../tds.service";
@graphql.Resolver(() => Tds)
export class TdsResolverBase {
  constructor(protected readonly service: TdsService) {}

  async _tdsItemsMeta(
    @graphql.Args() args: TdsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Tds])
  async tdsItems(@graphql.Args() args: TdsFindManyArgs): Promise<Tds[]> {
    return this.service.tdsItems(args);
  }

  @graphql.Query(() => Tds, { nullable: true })
  async tds(@graphql.Args() args: TdsFindUniqueArgs): Promise<Tds | null> {
    const result = await this.service.tds(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Tds)
  async createTds(@graphql.Args() args: CreateTdsArgs): Promise<Tds> {
    return await this.service.createTds({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Tds)
  async updateTds(@graphql.Args() args: UpdateTdsArgs): Promise<Tds | null> {
    try {
      return await this.service.updateTds({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tds)
  async deleteTds(@graphql.Args() args: DeleteTdsArgs): Promise<Tds | null> {
    try {
      return await this.service.deleteTds(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Tds): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
