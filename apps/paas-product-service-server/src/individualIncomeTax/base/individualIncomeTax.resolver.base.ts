/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { IndividualIncomeTax } from "./IndividualIncomeTax";
import { IndividualIncomeTaxCountArgs } from "./IndividualIncomeTaxCountArgs";
import { IndividualIncomeTaxFindManyArgs } from "./IndividualIncomeTaxFindManyArgs";
import { IndividualIncomeTaxFindUniqueArgs } from "./IndividualIncomeTaxFindUniqueArgs";
import { CreateIndividualIncomeTaxArgs } from "./CreateIndividualIncomeTaxArgs";
import { UpdateIndividualIncomeTaxArgs } from "./UpdateIndividualIncomeTaxArgs";
import { DeleteIndividualIncomeTaxArgs } from "./DeleteIndividualIncomeTaxArgs";
import { User } from "../../user/base/User";
import { IndividualIncomeTaxService } from "../individualIncomeTax.service";
@graphql.Resolver(() => IndividualIncomeTax)
export class IndividualIncomeTaxResolverBase {
  constructor(protected readonly service: IndividualIncomeTaxService) {}

  async _individualIncomeTaxesMeta(
    @graphql.Args() args: IndividualIncomeTaxCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IndividualIncomeTax])
  async individualIncomeTaxes(
    @graphql.Args() args: IndividualIncomeTaxFindManyArgs
  ): Promise<IndividualIncomeTax[]> {
    return this.service.individualIncomeTaxes(args);
  }

  @graphql.Query(() => IndividualIncomeTax, { nullable: true })
  async individualIncomeTax(
    @graphql.Args() args: IndividualIncomeTaxFindUniqueArgs
  ): Promise<IndividualIncomeTax | null> {
    const result = await this.service.individualIncomeTax(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IndividualIncomeTax)
  async createIndividualIncomeTax(
    @graphql.Args() args: CreateIndividualIncomeTaxArgs
  ): Promise<IndividualIncomeTax> {
    return await this.service.createIndividualIncomeTax({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => IndividualIncomeTax)
  async updateIndividualIncomeTax(
    @graphql.Args() args: UpdateIndividualIncomeTaxArgs
  ): Promise<IndividualIncomeTax | null> {
    try {
      return await this.service.updateIndividualIncomeTax({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IndividualIncomeTax)
  async deleteIndividualIncomeTax(
    @graphql.Args() args: DeleteIndividualIncomeTaxArgs
  ): Promise<IndividualIncomeTax | null> {
    try {
      return await this.service.deleteIndividualIncomeTax(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: IndividualIncomeTax
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
