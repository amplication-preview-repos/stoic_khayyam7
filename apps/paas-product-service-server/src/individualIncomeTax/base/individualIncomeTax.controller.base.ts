/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IndividualIncomeTaxService } from "../individualIncomeTax.service";
import { IndividualIncomeTaxCreateInput } from "./IndividualIncomeTaxCreateInput";
import { IndividualIncomeTax } from "./IndividualIncomeTax";
import { IndividualIncomeTaxFindManyArgs } from "./IndividualIncomeTaxFindManyArgs";
import { IndividualIncomeTaxWhereUniqueInput } from "./IndividualIncomeTaxWhereUniqueInput";
import { IndividualIncomeTaxUpdateInput } from "./IndividualIncomeTaxUpdateInput";

export class IndividualIncomeTaxControllerBase {
  constructor(protected readonly service: IndividualIncomeTaxService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IndividualIncomeTax })
  async createIndividualIncomeTax(
    @common.Body() data: IndividualIncomeTaxCreateInput
  ): Promise<IndividualIncomeTax> {
    return await this.service.createIndividualIncomeTax({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        annualIncome: true,
        createdAt: true,
        financialYear: true,
        id: true,
        incomeType: true,
        taxPaid: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IndividualIncomeTax] })
  @ApiNestedQuery(IndividualIncomeTaxFindManyArgs)
  async individualIncomeTaxes(
    @common.Req() request: Request
  ): Promise<IndividualIncomeTax[]> {
    const args = plainToClass(IndividualIncomeTaxFindManyArgs, request.query);
    return this.service.individualIncomeTaxes({
      ...args,
      select: {
        annualIncome: true,
        createdAt: true,
        financialYear: true,
        id: true,
        incomeType: true,
        taxPaid: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IndividualIncomeTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async individualIncomeTax(
    @common.Param() params: IndividualIncomeTaxWhereUniqueInput
  ): Promise<IndividualIncomeTax | null> {
    const result = await this.service.individualIncomeTax({
      where: params,
      select: {
        annualIncome: true,
        createdAt: true,
        financialYear: true,
        id: true,
        incomeType: true,
        taxPaid: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IndividualIncomeTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIndividualIncomeTax(
    @common.Param() params: IndividualIncomeTaxWhereUniqueInput,
    @common.Body() data: IndividualIncomeTaxUpdateInput
  ): Promise<IndividualIncomeTax | null> {
    try {
      return await this.service.updateIndividualIncomeTax({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          annualIncome: true,
          createdAt: true,
          financialYear: true,
          id: true,
          incomeType: true,
          taxPaid: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IndividualIncomeTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIndividualIncomeTax(
    @common.Param() params: IndividualIncomeTaxWhereUniqueInput
  ): Promise<IndividualIncomeTax | null> {
    try {
      return await this.service.deleteIndividualIncomeTax({
        where: params,
        select: {
          annualIncome: true,
          createdAt: true,
          financialYear: true,
          id: true,
          incomeType: true,
          taxPaid: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
