/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Gst as PrismaGst, User as PrismaUser } from "@prisma/client";

export class GstServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GstCountArgs, "select">): Promise<number> {
    return this.prisma.gst.count(args);
  }

  async gsts(args: Prisma.GstFindManyArgs): Promise<PrismaGst[]> {
    return this.prisma.gst.findMany(args);
  }
  async gst(args: Prisma.GstFindUniqueArgs): Promise<PrismaGst | null> {
    return this.prisma.gst.findUnique(args);
  }
  async createGst(args: Prisma.GstCreateArgs): Promise<PrismaGst> {
    return this.prisma.gst.create(args);
  }
  async updateGst(args: Prisma.GstUpdateArgs): Promise<PrismaGst> {
    return this.prisma.gst.update(args);
  }
  async deleteGst(args: Prisma.GstDeleteArgs): Promise<PrismaGst> {
    return this.prisma.gst.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.gst
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
