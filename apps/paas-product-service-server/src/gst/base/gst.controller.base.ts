/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GstService } from "../gst.service";
import { GstCreateInput } from "./GstCreateInput";
import { Gst } from "./Gst";
import { GstFindManyArgs } from "./GstFindManyArgs";
import { GstWhereUniqueInput } from "./GstWhereUniqueInput";
import { GstUpdateInput } from "./GstUpdateInput";

export class GstControllerBase {
  constructor(protected readonly service: GstService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Gst })
  async createGst(@common.Body() data: GstCreateInput): Promise<Gst> {
    return await this.service.createGst({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        annualTurnover: true,
        createdAt: true,
        financialYear: true,
        gstNumber: true,
        id: true,
        taxPaid: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Gst] })
  @ApiNestedQuery(GstFindManyArgs)
  async gsts(@common.Req() request: Request): Promise<Gst[]> {
    const args = plainToClass(GstFindManyArgs, request.query);
    return this.service.gsts({
      ...args,
      select: {
        annualTurnover: true,
        createdAt: true,
        financialYear: true,
        gstNumber: true,
        id: true,
        taxPaid: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Gst })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gst(@common.Param() params: GstWhereUniqueInput): Promise<Gst | null> {
    const result = await this.service.gst({
      where: params,
      select: {
        annualTurnover: true,
        createdAt: true,
        financialYear: true,
        gstNumber: true,
        id: true,
        taxPaid: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Gst })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGst(
    @common.Param() params: GstWhereUniqueInput,
    @common.Body() data: GstUpdateInput
  ): Promise<Gst | null> {
    try {
      return await this.service.updateGst({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          annualTurnover: true,
          createdAt: true,
          financialYear: true,
          gstNumber: true,
          id: true,
          taxPaid: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Gst })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGst(
    @common.Param() params: GstWhereUniqueInput
  ): Promise<Gst | null> {
    try {
      return await this.service.deleteGst({
        where: params,
        select: {
          annualTurnover: true,
          createdAt: true,
          financialYear: true,
          gstNumber: true,
          id: true,
          taxPaid: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
