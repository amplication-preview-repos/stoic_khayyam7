/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Gst } from "./Gst";
import { GstCountArgs } from "./GstCountArgs";
import { GstFindManyArgs } from "./GstFindManyArgs";
import { GstFindUniqueArgs } from "./GstFindUniqueArgs";
import { CreateGstArgs } from "./CreateGstArgs";
import { UpdateGstArgs } from "./UpdateGstArgs";
import { DeleteGstArgs } from "./DeleteGstArgs";
import { User } from "../../user/base/User";
import { GstService } from "../gst.service";
@graphql.Resolver(() => Gst)
export class GstResolverBase {
  constructor(protected readonly service: GstService) {}

  async _gstsMeta(
    @graphql.Args() args: GstCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Gst])
  async gsts(@graphql.Args() args: GstFindManyArgs): Promise<Gst[]> {
    return this.service.gsts(args);
  }

  @graphql.Query(() => Gst, { nullable: true })
  async gst(@graphql.Args() args: GstFindUniqueArgs): Promise<Gst | null> {
    const result = await this.service.gst(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Gst)
  async createGst(@graphql.Args() args: CreateGstArgs): Promise<Gst> {
    return await this.service.createGst({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Gst)
  async updateGst(@graphql.Args() args: UpdateGstArgs): Promise<Gst | null> {
    try {
      return await this.service.updateGst({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Gst)
  async deleteGst(@graphql.Args() args: DeleteGstArgs): Promise<Gst | null> {
    try {
      return await this.service.deleteGst(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Gst): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
