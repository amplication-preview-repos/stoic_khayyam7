/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BusinessIncomeTax } from "./BusinessIncomeTax";
import { BusinessIncomeTaxCountArgs } from "./BusinessIncomeTaxCountArgs";
import { BusinessIncomeTaxFindManyArgs } from "./BusinessIncomeTaxFindManyArgs";
import { BusinessIncomeTaxFindUniqueArgs } from "./BusinessIncomeTaxFindUniqueArgs";
import { CreateBusinessIncomeTaxArgs } from "./CreateBusinessIncomeTaxArgs";
import { UpdateBusinessIncomeTaxArgs } from "./UpdateBusinessIncomeTaxArgs";
import { DeleteBusinessIncomeTaxArgs } from "./DeleteBusinessIncomeTaxArgs";
import { User } from "../../user/base/User";
import { BusinessIncomeTaxService } from "../businessIncomeTax.service";
@graphql.Resolver(() => BusinessIncomeTax)
export class BusinessIncomeTaxResolverBase {
  constructor(protected readonly service: BusinessIncomeTaxService) {}

  async _businessIncomeTaxesMeta(
    @graphql.Args() args: BusinessIncomeTaxCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BusinessIncomeTax])
  async businessIncomeTaxes(
    @graphql.Args() args: BusinessIncomeTaxFindManyArgs
  ): Promise<BusinessIncomeTax[]> {
    return this.service.businessIncomeTaxes(args);
  }

  @graphql.Query(() => BusinessIncomeTax, { nullable: true })
  async businessIncomeTax(
    @graphql.Args() args: BusinessIncomeTaxFindUniqueArgs
  ): Promise<BusinessIncomeTax | null> {
    const result = await this.service.businessIncomeTax(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BusinessIncomeTax)
  async createBusinessIncomeTax(
    @graphql.Args() args: CreateBusinessIncomeTaxArgs
  ): Promise<BusinessIncomeTax> {
    return await this.service.createBusinessIncomeTax({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => BusinessIncomeTax)
  async updateBusinessIncomeTax(
    @graphql.Args() args: UpdateBusinessIncomeTaxArgs
  ): Promise<BusinessIncomeTax | null> {
    try {
      return await this.service.updateBusinessIncomeTax({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BusinessIncomeTax)
  async deleteBusinessIncomeTax(
    @graphql.Args() args: DeleteBusinessIncomeTaxArgs
  ): Promise<BusinessIncomeTax | null> {
    try {
      return await this.service.deleteBusinessIncomeTax(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: BusinessIncomeTax
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
