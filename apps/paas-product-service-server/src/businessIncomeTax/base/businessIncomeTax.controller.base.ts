/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BusinessIncomeTaxService } from "../businessIncomeTax.service";
import { BusinessIncomeTaxCreateInput } from "./BusinessIncomeTaxCreateInput";
import { BusinessIncomeTax } from "./BusinessIncomeTax";
import { BusinessIncomeTaxFindManyArgs } from "./BusinessIncomeTaxFindManyArgs";
import { BusinessIncomeTaxWhereUniqueInput } from "./BusinessIncomeTaxWhereUniqueInput";
import { BusinessIncomeTaxUpdateInput } from "./BusinessIncomeTaxUpdateInput";

export class BusinessIncomeTaxControllerBase {
  constructor(protected readonly service: BusinessIncomeTaxService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BusinessIncomeTax })
  async createBusinessIncomeTax(
    @common.Body() data: BusinessIncomeTaxCreateInput
  ): Promise<BusinessIncomeTax> {
    return await this.service.createBusinessIncomeTax({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        annualIncome: true,
        businessName: true,
        businessType: true,
        createdAt: true,
        financialYear: true,
        id: true,
        taxPaid: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BusinessIncomeTax] })
  @ApiNestedQuery(BusinessIncomeTaxFindManyArgs)
  async businessIncomeTaxes(
    @common.Req() request: Request
  ): Promise<BusinessIncomeTax[]> {
    const args = plainToClass(BusinessIncomeTaxFindManyArgs, request.query);
    return this.service.businessIncomeTaxes({
      ...args,
      select: {
        annualIncome: true,
        businessName: true,
        businessType: true,
        createdAt: true,
        financialYear: true,
        id: true,
        taxPaid: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BusinessIncomeTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async businessIncomeTax(
    @common.Param() params: BusinessIncomeTaxWhereUniqueInput
  ): Promise<BusinessIncomeTax | null> {
    const result = await this.service.businessIncomeTax({
      where: params,
      select: {
        annualIncome: true,
        businessName: true,
        businessType: true,
        createdAt: true,
        financialYear: true,
        id: true,
        taxPaid: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BusinessIncomeTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBusinessIncomeTax(
    @common.Param() params: BusinessIncomeTaxWhereUniqueInput,
    @common.Body() data: BusinessIncomeTaxUpdateInput
  ): Promise<BusinessIncomeTax | null> {
    try {
      return await this.service.updateBusinessIncomeTax({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          annualIncome: true,
          businessName: true,
          businessType: true,
          createdAt: true,
          financialYear: true,
          id: true,
          taxPaid: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BusinessIncomeTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBusinessIncomeTax(
    @common.Param() params: BusinessIncomeTaxWhereUniqueInput
  ): Promise<BusinessIncomeTax | null> {
    try {
      return await this.service.deleteBusinessIncomeTax({
        where: params,
        select: {
          annualIncome: true,
          businessName: true,
          businessType: true,
          createdAt: true,
          financialYear: true,
          id: true,
          taxPaid: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
